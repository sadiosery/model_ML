# ui6_streamlit_full.py
import streamlit as st
import pandas as pd
from sklearn.preprocessing import OneHotEncoder
from sklearn.ensemble import RandomForestRegressor
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet
from docx import Document
import io

# -----------------------------
# 1Ô∏è‚É£ - Pr√©parer les donn√©es
# -----------------------------
data = pd.DataFrame({
    'Jour': ['Lundi','Lundi','Mardi','Mercredi','Jeudi','Vendredi'],
    'Heure': ['Matin','Soir','Matin','Midi','Soir','Matin'],
    'Meteo': ['soleil','pluie','soleil','neige','pluie','soleil'],
    'Promo': ['Oui','Non','Non','Oui','Oui','Non'],
    'Evenement': ['Non','Oui','Non','Non','Oui','Non'],
    'Clients': [120,180,140,100,200,160]
})

encoder = OneHotEncoder(sparse_output=False)
X_cat = encoder.fit_transform(data[['Jour','Heure','Meteo','Promo','Evenement']])
X_cat_df = pd.DataFrame(X_cat, columns=encoder.get_feature_names_out())
X = X_cat_df
y = data['Clients']

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X, y)

# -----------------------------
# 2Ô∏è‚É£ - Interface Streamlit
# -----------------------------
st.set_page_config(page_title="Pr√©diction Clients", layout="wide")
st.title("üìä Pr√©diction du nombre de clients")

# S√©lections
jours = ['Lundi','Mardi','Mercredi','Jeudi','Vendredi']
heures = ['Matin','Midi','Soir']
meteo_options = ['soleil','pluie','neige']
promo_options = ['Oui','Non']
evenement_options = ['Oui','Non']

col1, col2, col3 = st.columns(3)

with col1:
    jour = st.selectbox("Jour", jours)
    heure = st.selectbox("Heure", heures)
with col2:
    meteo = st.selectbox("M√©t√©o", meteo_options)
    promo = st.selectbox("Promotion", promo_options)
with col3:
    evenement = st.selectbox("√âv√©nement", evenement_options)

# Historique dans la session
if "historique" not in st.session_state:
    st.session_state.historique = []

# -----------------------------
# 3Ô∏è‚É£ - Pr√©diction
# -----------------------------
if st.button("Pr√©dire"):
    try:
        nouveau_jour = pd.DataFrame({
            'Jour': [jour],
            'Heure': [heure],
            'Meteo': [meteo],
            'Promo': [promo],
            'Evenement': [evenement]
        })
        nouveau_jour_cat = encoder.transform(nouveau_jour)
        nouveau_jour_df = pd.DataFrame(nouveau_jour_cat, columns=encoder.get_feature_names_out())
        resultat = model.predict(nouveau_jour_df)
        prediction = int(resultat[0])

        st.success(f"‚úÖ Clients pr√©vus : {prediction}")
        # Ajouter √† l'historique
        ligne = f"{jour} - {heure} - {meteo} - Promo:{promo} - √âv√©nement:{evenement} ‚ûú {prediction} clients"
        st.session_state.historique.append(ligne)

    except Exception as e:
        st.error(f"Une erreur est survenue : {e}")

# -----------------------------
# 4Ô∏è‚É£ - Historique
# -----------------------------
st.subheader("üìú Historique des pr√©dictions")
if st.session_state.historique:
    for h in st.session_state.historique:
        st.write(h)
else:
    st.write("Aucune pr√©diction pour le moment.")

# -----------------------------
# 5Ô∏è‚É£ - Export CSV, PDF, Word
# -----------------------------
# Export CSV
if st.button("Exporter CSV"):
    if st.session_state.historique:
        df_hist = pd.DataFrame(st.session_state.historique, columns=["Historique"])
        csv = df_hist.to_csv(index=False).encode('utf-8')
        st.download_button("T√©l√©charger CSV", data=csv, file_name="historique.csv", mime="text/csv")
    else:
        st.warning("Aucune donn√©e √† exporter.")

# Export PDF
if st.button("Exporter PDF"):
    if st.session_state.historique:
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        styles = getSampleStyleSheet()
        story = [Paragraph("Rapport des Pr√©dictions", styles['Title']), Spacer(1, 12)]
        for line in st.session_state.historique:
            story.append(Paragraph(line, styles['Normal']))
        doc.build(story)
        st.download_button("T√©l√©charger PDF", data=buffer.getvalue(), file_name="historique.pdf", mime="application/pdf")
    else:
        st.warning("Aucune donn√©e √† exporter.")

# Export Word
if st.button("Exporter Word"):
    if st.session_state.historique:
        buffer = io.BytesIO()
        docx_doc = Document()
        docx_doc.add_heading("Rapport des Pr√©dictions", level=1)
        for line in st.session_state.historique:
            docx_doc.add_paragraph(line)
        docx_doc.save(buffer)
        st.download_button("T√©l√©charger Word", data=buffer.getvalue(), file_name="historique.docx", mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document")
    else:
        st.warning("Aucune donn√©e √† exporter.")

# -----------------------------
# 6Ô∏è‚É£ - R√©initialiser
# -----------------------------
if st.button("R√©initialiser historique"):
    st.session_state.historique = []
    st.success("Historique r√©initialis√© ‚úÖ")
